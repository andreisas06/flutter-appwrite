plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

// This method facilitates the loading of environment variables from the .env file and --dart-define flags.
// The variables from the .env file are loaded first, the values can be overridden by the --dart-define flags.
def _loadEnvironmentVariables() {
    // Get environment variables from --dart-define flags
    if (project.hasProperty('dart-defines')) {
        project.property('dart-defines')
                .split(',').each { entry ->
            def (key, value) = new String(entry.decodeBase64(), 'UTF-8').split('=')
            System.setProperty(key, value)
        }
    }

    // Get environment variables from .env file
    def envFile
    if (System.getProperty('ENV_FILE') != null) {
        envFile = file('../../' + System.getProperty('ENV_FILE'))
    } else {
        envFile = file('../../.env.dev')
    }

    if (envFile.canRead()) {
        envFile.readLines().each { line ->
            if (line.startsWith('#') || line.isEmpty()) return
            def (key, value) = line.split('=')
            System.setProperty(key, value)
        }
    } else {
        throw new Exception("You are trying to run the app with the '"+ envFile +"' environmentfile, make sure the file exists")
    }

    assert System.getProperty('APP_ID') != null, "The APP_ID environment variable is not set. Please set it in the .env file or by using the --dart-define flag."
    assert System.getProperty('APP_TITLE') != null, "The APP_TITLE environment variable is not set. Please set it in the .env file or by using the --dart-define flag."
}

_loadEnvironmentVariables()


def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace System.getProperty('APP_ID')
    compileSdkVersion 34 // flutter.compileSdkVersion
    ndkVersion "25.1.8937393" // flutter.ndkVersion

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId System.getProperty('APP_ID')
        dimension "default"
        applicationIdSuffix ""
        manifestPlaceholders = [
                applicationLabel: System.getProperty('APP_TITLE'),
        ]
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 21 // flutter.minSdkVersion
        targetSdkVersion 34 // flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt')
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.2.2'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.window:window:1.2.0'
    implementation 'androidx.window:window-java:1.2.0'
}